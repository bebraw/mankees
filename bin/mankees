#!/usr/bin/env node
var fs = require('fs');
var path = require('path');
var exec = require('child_process').exec;

var marked = require('marked');
var walker = require('filewalker');
var request = require('request');
var program = require('commander');
var Git = require('git-wrapper');

var VERSION = require('../package.json').version;
var INDEX = 'https://raw.github.com/wiki/mankees/cli/Mankees.md';
var MANKEE_DIR = getMankeeDir();


main();

function main() {
    if(!fs.existsSync(MANKEE_DIR)) {
        return console.error('Create ' + MANKEE_DIR +
            ' and fill it with joy and scripts that export `execute`!');
    }

    getMankees(MANKEE_DIR, run);
}

function run(err, mankees) {
    if(err) return console.error(err);

    program.version(VERSION).
        option('-s --search', 'search for mankees online').
        option('-i --install', 'install mankee').
        option('-l --list', 'list').
        on('--help', function() {
            var name = last(process.argv);

            if(name == '-h' || name == '--help') return;
            if(name in mankees) {
                return console.log(mankees[name].help || 'No help for this mankee yet!');
            }

            console.error('No mankee found! :(');
        }).parse(process.argv);

    if(program.search) searchMankees(INDEX, program.args[0], function(err, d) {
        if(err) return console.error(err);

        console.log(d);
    });
    else if(program.install) searchMankees(INDEX, program.args[0], function(err, d) {
        if(err) return console.error(err);
        if(d.length > 1) return console.error('Too many matches! Specify mankee by name');

        installMankee(MANKEE_DIR, d);
    });
    else if(program.list) listMankees(mankees);
    else executeMankee(mankees, program.args);
}

function installMankee(dir, repo) {
    var cwd = process.cwd();
    var git = new Git();

    process.chdir(dir);

    git.exec('clone', {}, [repo.url, repo.name], function(err, msg) {
        if(err) return console.error('failed to clone', repo.url, err);

        console.log('Cloned ' + repo.url + ' at ' + dir);

        process.chdir(path.join(dir, repo.name));

        exec('npm install', function(err) {
            if(err) return console.error('failed to execute `npm install`', err);

            console.log('Installed mankee dependencies locally');

            process.chdir(cwd);
        })
    });
}

function last(arr) {
    return arr[arr.length - 1];
}

function getMankeeDir() {
    return path.join(getUserDir(), '.mankees');
}

function getUserDir() {
    // http://stackoverflow.com/a/9081436/228885
    return process.env[(process.platform == 'win32')? 'USERPROFILE': 'HOME'];
}

function getMankees(mankeeDir, cb) {
    var ret = {};
    var root, mp, pp;

    walker(mankeeDir, {
        recursive: false
    }).on('dir', function(p) {
        root = path.join(mankeeDir, p);

        try {
            ret[p] = require(root);
            pp = path.join(root, 'package.json');

            if(!ret[p].help && fs.existsSync(pp)) {
                ret[p].help = require(pp).description;
            }
        } catch(e) {
            console.warn('Failed loading ´' + p + '´ mankee!');
        }
    }).on('error', cb).on('done', function() {
        cb(null, ret);
    }).walk();
}

function searchMankees(url, query, cb) {
    request.get({url: url}, function(err, res, data) {
        if(err) return cb(err);

        searchMankee(parseMankees(data), query, cb);
    });
}

function searchMankee(mankees, query, cb) {
    if(!query) return cb(null, mankees);
    var ret;

    query = query.trim();

    mankees.forEach(function(v) {
        if(v.name == query) ret = v;
    });

    if(ret) cb(null, ret);
    else cb('No mankee found!');
}

function parseMankees(data) {
    var lexer = new marked.Lexer();
    var ret = [];
    var withinItem = false;

    lexer.lex(data).forEach(function(v) {
        if(v.type == 'list_item_end') withinItem = false;
        if(withinItem) parseMankee(v.text);
        if(v.type == 'list_item_start') withinItem = true;
    });

    function parseMankee(d) {
        var parts = d.split(' - ');

        ret.push({
            name: parts[0],
            url: parts[1]
        });
    }

    return ret;
}

function listMankees(mankees) {
    var names = Object.keys(mankees);

    if(names.length) console.log(names.join(', '));
    else console.error('No mankees found! :(');
}

function executeMankee(mankees, args) {
    if(!args.length) return console.log('No mankee selected!');

    var name = args.shift();

    if(name in mankees) {
        var mankee = mankees[name];

        mankee.apply(undefined, args);
    }
    else console.error('*' + name + '* mankee was not found!');
}
